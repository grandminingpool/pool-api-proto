// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: charts.proto

package chartsProto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChartPeriod int32

const (
	ChartPeriod_Hour  ChartPeriod = 0
	ChartPeriod_Day   ChartPeriod = 1
	ChartPeriod_Week  ChartPeriod = 2
	ChartPeriod_Month ChartPeriod = 3
)

// Enum value maps for ChartPeriod.
var (
	ChartPeriod_name = map[int32]string{
		0: "Hour",
		1: "Day",
		2: "Week",
		3: "Month",
	}
	ChartPeriod_value = map[string]int32{
		"Hour":  0,
		"Day":   1,
		"Week":  2,
		"Month": 3,
	}
)

func (x ChartPeriod) Enum() *ChartPeriod {
	p := new(ChartPeriod)
	*p = x
	return p
}

func (x ChartPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_charts_proto_enumTypes[0].Descriptor()
}

func (ChartPeriod) Type() protoreflect.EnumType {
	return &file_charts_proto_enumTypes[0]
}

func (x ChartPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartPeriod.Descriptor instead.
func (ChartPeriod) EnumDescriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{0}
}

type GetPoolStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period ChartPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=charts.ChartPeriod" json:"period,omitempty"`
	Solo   bool        `protobuf:"varint,2,opt,name=solo,proto3" json:"solo,omitempty"`
}

func (x *GetPoolStatsRequest) Reset() {
	*x = GetPoolStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolStatsRequest) ProtoMessage() {}

func (x *GetPoolStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolStatsRequest.ProtoReflect.Descriptor instead.
func (*GetPoolStatsRequest) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{0}
}

func (x *GetPoolStatsRequest) GetPeriod() ChartPeriod {
	if x != nil {
		return x.Period
	}
	return ChartPeriod_Hour
}

func (x *GetPoolStatsRequest) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

type PoolStatsPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashrate    []byte                 `protobuf:"bytes,1,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	AvgHashrate []byte                 `protobuf:"bytes,2,opt,name=avg_hashrate,json=avgHashrate,proto3" json:"avg_hashrate,omitempty"`
	MinersCount uint32                 `protobuf:"varint,3,opt,name=miners_count,json=minersCount,proto3" json:"miners_count,omitempty"`
	Date        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *PoolStatsPoint) Reset() {
	*x = PoolStatsPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStatsPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatsPoint) ProtoMessage() {}

func (x *PoolStatsPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatsPoint.ProtoReflect.Descriptor instead.
func (*PoolStatsPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{1}
}

func (x *PoolStatsPoint) GetHashrate() []byte {
	if x != nil {
		return x.Hashrate
	}
	return nil
}

func (x *PoolStatsPoint) GetAvgHashrate() []byte {
	if x != nil {
		return x.AvgHashrate
	}
	return nil
}

func (x *PoolStatsPoint) GetMinersCount() uint32 {
	if x != nil {
		return x.MinersCount
	}
	return 0
}

func (x *PoolStatsPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PoolStatsPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*PoolStatsPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PoolStatsPoints) Reset() {
	*x = PoolStatsPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStatsPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatsPoints) ProtoMessage() {}

func (x *PoolStatsPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatsPoints.ProtoReflect.Descriptor instead.
func (*PoolStatsPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{2}
}

func (x *PoolStatsPoints) GetPoints() []*PoolStatsPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type GetNetworkDifficultiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period ChartPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=charts.ChartPeriod" json:"period,omitempty"`
	Solo   bool        `protobuf:"varint,2,opt,name=solo,proto3" json:"solo,omitempty"`
}

func (x *GetNetworkDifficultiesRequest) Reset() {
	*x = GetNetworkDifficultiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkDifficultiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkDifficultiesRequest) ProtoMessage() {}

func (x *GetNetworkDifficultiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkDifficultiesRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkDifficultiesRequest) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{3}
}

func (x *GetNetworkDifficultiesRequest) GetPeriod() ChartPeriod {
	if x != nil {
		return x.Period
	}
	return ChartPeriod_Hour
}

func (x *GetNetworkDifficultiesRequest) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

type NetworkDifficultiesPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty []byte                 `protobuf:"bytes,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Date       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *NetworkDifficultiesPoint) Reset() {
	*x = NetworkDifficultiesPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDifficultiesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDifficultiesPoint) ProtoMessage() {}

func (x *NetworkDifficultiesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDifficultiesPoint.ProtoReflect.Descriptor instead.
func (*NetworkDifficultiesPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkDifficultiesPoint) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *NetworkDifficultiesPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type NetworkDifficultiesPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*NetworkDifficultiesPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *NetworkDifficultiesPoints) Reset() {
	*x = NetworkDifficultiesPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDifficultiesPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDifficultiesPoints) ProtoMessage() {}

func (x *NetworkDifficultiesPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDifficultiesPoints.ProtoReflect.Descriptor instead.
func (*NetworkDifficultiesPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkDifficultiesPoints) GetPoints() []*NetworkDifficultiesPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type GetRoundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period ChartPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=charts.ChartPeriod" json:"period,omitempty"`
}

func (x *GetRoundsRequest) Reset() {
	*x = GetRoundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundsRequest) ProtoMessage() {}

func (x *GetRoundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundsRequest.ProtoReflect.Descriptor instead.
func (*GetRoundsRequest) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{6}
}

func (x *GetRoundsRequest) GetPeriod() ChartPeriod {
	if x != nil {
		return x.Period
	}
	return ChartPeriod_Hour
}

type RoundsPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundsCount      uint32                 `protobuf:"varint,1,opt,name=rounds_count,json=roundsCount,proto3" json:"rounds_count,omitempty"`
	MinersCount      uint32                 `protobuf:"varint,2,opt,name=miners_count,json=minersCount,proto3" json:"miners_count,omitempty"`
	AvgRoundInterval float64                `protobuf:"fixed64,3,opt,name=avg_round_interval,json=avgRoundInterval,proto3" json:"avg_round_interval,omitempty"`
	Date             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *RoundsPoint) Reset() {
	*x = RoundsPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundsPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundsPoint) ProtoMessage() {}

func (x *RoundsPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundsPoint.ProtoReflect.Descriptor instead.
func (*RoundsPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{7}
}

func (x *RoundsPoint) GetRoundsCount() uint32 {
	if x != nil {
		return x.RoundsCount
	}
	return 0
}

func (x *RoundsPoint) GetMinersCount() uint32 {
	if x != nil {
		return x.MinersCount
	}
	return 0
}

func (x *RoundsPoint) GetAvgRoundInterval() float64 {
	if x != nil {
		return x.AvgRoundInterval
	}
	return 0
}

func (x *RoundsPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type RoundsPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*RoundsPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *RoundsPoints) Reset() {
	*x = RoundsPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundsPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundsPoints) ProtoMessage() {}

func (x *RoundsPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundsPoints.ProtoReflect.Descriptor instead.
func (*RoundsPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{8}
}

func (x *RoundsPoints) GetPoints() []*RoundsPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type GetMinerChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner  string      `protobuf:"bytes,1,opt,name=miner,proto3" json:"miner,omitempty"`
	Solo   bool        `protobuf:"varint,2,opt,name=solo,proto3" json:"solo,omitempty"`
	Period ChartPeriod `protobuf:"varint,3,opt,name=period,proto3,enum=charts.ChartPeriod" json:"period,omitempty"`
}

func (x *GetMinerChartRequest) Reset() {
	*x = GetMinerChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerChartRequest) ProtoMessage() {}

func (x *GetMinerChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerChartRequest.ProtoReflect.Descriptor instead.
func (*GetMinerChartRequest) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{9}
}

func (x *GetMinerChartRequest) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *GetMinerChartRequest) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *GetMinerChartRequest) GetPeriod() ChartPeriod {
	if x != nil {
		return x.Period
	}
	return ChartPeriod_Hour
}

type MinerProfitabilityPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance uint64                 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Date    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MinerProfitabilityPoint) Reset() {
	*x = MinerProfitabilityPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerProfitabilityPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerProfitabilityPoint) ProtoMessage() {}

func (x *MinerProfitabilityPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerProfitabilityPoint.ProtoReflect.Descriptor instead.
func (*MinerProfitabilityPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{10}
}

func (x *MinerProfitabilityPoint) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *MinerProfitabilityPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type MinerProfitabilitiesPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*MinerProfitabilityPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *MinerProfitabilitiesPoints) Reset() {
	*x = MinerProfitabilitiesPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerProfitabilitiesPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerProfitabilitiesPoints) ProtoMessage() {}

func (x *MinerProfitabilitiesPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerProfitabilitiesPoints.ProtoReflect.Descriptor instead.
func (*MinerProfitabilitiesPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{11}
}

func (x *MinerProfitabilitiesPoints) GetPoints() []*MinerProfitabilityPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type MinerHashratesPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashrate []byte                 `protobuf:"bytes,1,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	Date     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MinerHashratesPoint) Reset() {
	*x = MinerHashratesPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerHashratesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerHashratesPoint) ProtoMessage() {}

func (x *MinerHashratesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerHashratesPoint.ProtoReflect.Descriptor instead.
func (*MinerHashratesPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{12}
}

func (x *MinerHashratesPoint) GetHashrate() []byte {
	if x != nil {
		return x.Hashrate
	}
	return nil
}

func (x *MinerHashratesPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type MinerHashratesPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*MinerHashratesPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *MinerHashratesPoints) Reset() {
	*x = MinerHashratesPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerHashratesPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerHashratesPoints) ProtoMessage() {}

func (x *MinerHashratesPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerHashratesPoints.ProtoReflect.Descriptor instead.
func (*MinerHashratesPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{13}
}

func (x *MinerHashratesPoints) GetPoints() []*MinerHashratesPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type GetMinerWorkerChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner  string      `protobuf:"bytes,1,opt,name=miner,proto3" json:"miner,omitempty"`
	Worker string      `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	Period ChartPeriod `protobuf:"varint,3,opt,name=period,proto3,enum=charts.ChartPeriod" json:"period,omitempty"`
}

func (x *GetMinerWorkerChartRequest) Reset() {
	*x = GetMinerWorkerChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerWorkerChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerWorkerChartRequest) ProtoMessage() {}

func (x *GetMinerWorkerChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerWorkerChartRequest.ProtoReflect.Descriptor instead.
func (*GetMinerWorkerChartRequest) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{14}
}

func (x *GetMinerWorkerChartRequest) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *GetMinerWorkerChartRequest) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *GetMinerWorkerChartRequest) GetPeriod() ChartPeriod {
	if x != nil {
		return x.Period
	}
	return ChartPeriod_Hour
}

type MinerSharesPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptedSharesCount   uint32                 `protobuf:"varint,1,opt,name=accepted_shares_count,json=acceptedSharesCount,proto3" json:"accepted_shares_count,omitempty"`
	RejectedSharesCount   uint32                 `protobuf:"varint,2,opt,name=rejected_shares_count,json=rejectedSharesCount,proto3" json:"rejected_shares_count,omitempty"`
	StaleSharesCount      uint32                 `protobuf:"varint,3,opt,name=stale_shares_count,json=staleSharesCount,proto3" json:"stale_shares_count,omitempty"`
	ValidBlockSharesCount uint32                 `protobuf:"varint,4,opt,name=valid_block_shares_count,json=validBlockSharesCount,proto3" json:"valid_block_shares_count,omitempty"`
	Date                  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MinerSharesPoint) Reset() {
	*x = MinerSharesPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerSharesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerSharesPoint) ProtoMessage() {}

func (x *MinerSharesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerSharesPoint.ProtoReflect.Descriptor instead.
func (*MinerSharesPoint) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{15}
}

func (x *MinerSharesPoint) GetAcceptedSharesCount() uint32 {
	if x != nil {
		return x.AcceptedSharesCount
	}
	return 0
}

func (x *MinerSharesPoint) GetRejectedSharesCount() uint32 {
	if x != nil {
		return x.RejectedSharesCount
	}
	return 0
}

func (x *MinerSharesPoint) GetStaleSharesCount() uint32 {
	if x != nil {
		return x.StaleSharesCount
	}
	return 0
}

func (x *MinerSharesPoint) GetValidBlockSharesCount() uint32 {
	if x != nil {
		return x.ValidBlockSharesCount
	}
	return 0
}

func (x *MinerSharesPoint) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type MinerSharesPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*MinerSharesPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *MinerSharesPoints) Reset() {
	*x = MinerSharesPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerSharesPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerSharesPoints) ProtoMessage() {}

func (x *MinerSharesPoints) ProtoReflect() protoreflect.Message {
	mi := &file_charts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerSharesPoints.ProtoReflect.Descriptor instead.
func (*MinerSharesPoints) Descriptor() ([]byte, []int) {
	return file_charts_proto_rawDescGZIP(), []int{16}
}

func (x *MinerSharesPoints) GetPoints() []*MinerSharesPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

var File_charts_proto protoreflect.FileDescriptor

var file_charts_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x22,
	0xa2, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x22, 0x6a, 0x0a, 0x18, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x61, 0x76, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x3b, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6d,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f,
	0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x63, 0x0a,
	0x17, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x55, 0x0a, 0x1a, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x14,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x35, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x10, 0x03, 0x32, 0xa3, 0x05, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_charts_proto_rawDescOnce sync.Once
	file_charts_proto_rawDescData = file_charts_proto_rawDesc
)

func file_charts_proto_rawDescGZIP() []byte {
	file_charts_proto_rawDescOnce.Do(func() {
		file_charts_proto_rawDescData = protoimpl.X.CompressGZIP(file_charts_proto_rawDescData)
	})
	return file_charts_proto_rawDescData
}

var file_charts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_charts_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_charts_proto_goTypes = []interface{}{
	(ChartPeriod)(0),                      // 0: charts.ChartPeriod
	(*GetPoolStatsRequest)(nil),           // 1: charts.GetPoolStatsRequest
	(*PoolStatsPoint)(nil),                // 2: charts.PoolStatsPoint
	(*PoolStatsPoints)(nil),               // 3: charts.PoolStatsPoints
	(*GetNetworkDifficultiesRequest)(nil), // 4: charts.GetNetworkDifficultiesRequest
	(*NetworkDifficultiesPoint)(nil),      // 5: charts.NetworkDifficultiesPoint
	(*NetworkDifficultiesPoints)(nil),     // 6: charts.NetworkDifficultiesPoints
	(*GetRoundsRequest)(nil),              // 7: charts.GetRoundsRequest
	(*RoundsPoint)(nil),                   // 8: charts.RoundsPoint
	(*RoundsPoints)(nil),                  // 9: charts.RoundsPoints
	(*GetMinerChartRequest)(nil),          // 10: charts.GetMinerChartRequest
	(*MinerProfitabilityPoint)(nil),       // 11: charts.MinerProfitabilityPoint
	(*MinerProfitabilitiesPoints)(nil),    // 12: charts.MinerProfitabilitiesPoints
	(*MinerHashratesPoint)(nil),           // 13: charts.MinerHashratesPoint
	(*MinerHashratesPoints)(nil),          // 14: charts.MinerHashratesPoints
	(*GetMinerWorkerChartRequest)(nil),    // 15: charts.GetMinerWorkerChartRequest
	(*MinerSharesPoint)(nil),              // 16: charts.MinerSharesPoint
	(*MinerSharesPoints)(nil),             // 17: charts.MinerSharesPoints
	(*timestamppb.Timestamp)(nil),         // 18: google.protobuf.Timestamp
}
var file_charts_proto_depIdxs = []int32{
	0,  // 0: charts.GetPoolStatsRequest.period:type_name -> charts.ChartPeriod
	18, // 1: charts.PoolStatsPoint.date:type_name -> google.protobuf.Timestamp
	2,  // 2: charts.PoolStatsPoints.points:type_name -> charts.PoolStatsPoint
	0,  // 3: charts.GetNetworkDifficultiesRequest.period:type_name -> charts.ChartPeriod
	18, // 4: charts.NetworkDifficultiesPoint.date:type_name -> google.protobuf.Timestamp
	5,  // 5: charts.NetworkDifficultiesPoints.points:type_name -> charts.NetworkDifficultiesPoint
	0,  // 6: charts.GetRoundsRequest.period:type_name -> charts.ChartPeriod
	18, // 7: charts.RoundsPoint.date:type_name -> google.protobuf.Timestamp
	8,  // 8: charts.RoundsPoints.points:type_name -> charts.RoundsPoint
	0,  // 9: charts.GetMinerChartRequest.period:type_name -> charts.ChartPeriod
	18, // 10: charts.MinerProfitabilityPoint.date:type_name -> google.protobuf.Timestamp
	11, // 11: charts.MinerProfitabilitiesPoints.points:type_name -> charts.MinerProfitabilityPoint
	18, // 12: charts.MinerHashratesPoint.date:type_name -> google.protobuf.Timestamp
	13, // 13: charts.MinerHashratesPoints.points:type_name -> charts.MinerHashratesPoint
	0,  // 14: charts.GetMinerWorkerChartRequest.period:type_name -> charts.ChartPeriod
	18, // 15: charts.MinerSharesPoint.date:type_name -> google.protobuf.Timestamp
	16, // 16: charts.MinerSharesPoints.points:type_name -> charts.MinerSharesPoint
	1,  // 17: charts.ChartsService.GetPoolStats:input_type -> charts.GetPoolStatsRequest
	4,  // 18: charts.ChartsService.GetNetworkDifficulties:input_type -> charts.GetNetworkDifficultiesRequest
	7,  // 19: charts.ChartsService.GetRounds:input_type -> charts.GetRoundsRequest
	10, // 20: charts.ChartsService.GetMinerProfitabilities:input_type -> charts.GetMinerChartRequest
	10, // 21: charts.ChartsService.GetMinerHashrates:input_type -> charts.GetMinerChartRequest
	15, // 22: charts.ChartsService.GetMinerWorkerHashrates:input_type -> charts.GetMinerWorkerChartRequest
	10, // 23: charts.ChartsService.GetMinerShares:input_type -> charts.GetMinerChartRequest
	15, // 24: charts.ChartsService.GetMinerWorkerShares:input_type -> charts.GetMinerWorkerChartRequest
	3,  // 25: charts.ChartsService.GetPoolStats:output_type -> charts.PoolStatsPoints
	6,  // 26: charts.ChartsService.GetNetworkDifficulties:output_type -> charts.NetworkDifficultiesPoints
	9,  // 27: charts.ChartsService.GetRounds:output_type -> charts.RoundsPoints
	12, // 28: charts.ChartsService.GetMinerProfitabilities:output_type -> charts.MinerProfitabilitiesPoints
	14, // 29: charts.ChartsService.GetMinerHashrates:output_type -> charts.MinerHashratesPoints
	14, // 30: charts.ChartsService.GetMinerWorkerHashrates:output_type -> charts.MinerHashratesPoints
	17, // 31: charts.ChartsService.GetMinerShares:output_type -> charts.MinerSharesPoints
	17, // 32: charts.ChartsService.GetMinerWorkerShares:output_type -> charts.MinerSharesPoints
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_charts_proto_init() }
func file_charts_proto_init() {
	if File_charts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_charts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoolStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStatsPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStatsPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkDifficultiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDifficultiesPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDifficultiesPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundsPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundsPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerProfitabilityPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerProfitabilitiesPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerHashratesPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerHashratesPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerWorkerChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerSharesPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerSharesPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_charts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_charts_proto_goTypes,
		DependencyIndexes: file_charts_proto_depIdxs,
		EnumInfos:         file_charts_proto_enumTypes,
		MessageInfos:      file_charts_proto_msgTypes,
	}.Build()
	File_charts_proto = out.File
	file_charts_proto_rawDesc = nil
	file_charts_proto_goTypes = nil
	file_charts_proto_depIdxs = nil
}
