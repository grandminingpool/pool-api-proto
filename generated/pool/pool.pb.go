// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: pool.proto

package poolProto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PayoutMode int32

const (
	PayoutMode_PPLNS PayoutMode = 0
	PayoutMode_PROP  PayoutMode = 1
)

// Enum value maps for PayoutMode.
var (
	PayoutMode_name = map[int32]string{
		0: "PPLNS",
		1: "PROP",
	}
	PayoutMode_value = map[string]int32{
		"PPLNS": 0,
		"PROP":  1,
	}
)

func (x PayoutMode) Enum() *PayoutMode {
	p := new(PayoutMode)
	*p = x
	return p
}

func (x PayoutMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayoutMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_proto_enumTypes[0].Descriptor()
}

func (PayoutMode) Type() protoreflect.EnumType {
	return &file_pool_proto_enumTypes[0]
}

func (x PayoutMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayoutMode.Descriptor instead.
func (PayoutMode) EnumDescriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{0}
}

type PayoutsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval  int32   `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	MinPayout *uint64 `protobuf:"varint,2,opt,name=min_payout,json=minPayout,proto3,oneof" json:"min_payout,omitempty"`
	MaxPayout *uint64 `protobuf:"varint,3,opt,name=max_payout,json=maxPayout,proto3,oneof" json:"max_payout,omitempty"`
}

func (x *PayoutsInfo) Reset() {
	*x = PayoutsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutsInfo) ProtoMessage() {}

func (x *PayoutsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutsInfo.ProtoReflect.Descriptor instead.
func (*PayoutsInfo) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{0}
}

func (x *PayoutsInfo) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PayoutsInfo) GetMinPayout() uint64 {
	if x != nil && x.MinPayout != nil {
		return *x.MinPayout
	}
	return 0
}

func (x *PayoutsInfo) GetMaxPayout() uint64 {
	if x != nil && x.MaxPayout != nil {
		return *x.MaxPayout
	}
	return 0
}

type PoolFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee     float64  `protobuf:"fixed64,1,opt,name=fee,proto3" json:"fee,omitempty"`
	SoloFee *float64 `protobuf:"fixed64,2,opt,name=solo_fee,json=soloFee,proto3,oneof" json:"solo_fee,omitempty"`
}

func (x *PoolFee) Reset() {
	*x = PoolFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolFee) ProtoMessage() {}

func (x *PoolFee) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolFee.ProtoReflect.Descriptor instead.
func (*PoolFee) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{1}
}

func (x *PoolFee) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *PoolFee) GetSoloFee() float64 {
	if x != nil && x.SoloFee != nil {
		return *x.SoloFee
	}
	return 0
}

type PoolSlave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region      string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Host        string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	TcpPort     int32                  `protobuf:"varint,3,opt,name=tcp_port,json=tcpPort,proto3" json:"tcp_port,omitempty"`
	SslPort     int32                  `protobuf:"varint,4,opt,name=ssl_port,json=sslPort,proto3" json:"ssl_port,omitempty"`
	SoloPort    *int32                 `protobuf:"varint,5,opt,name=solo_port,json=soloPort,proto3,oneof" json:"solo_port,omitempty"`
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
}

func (x *PoolSlave) Reset() {
	*x = PoolSlave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolSlave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSlave) ProtoMessage() {}

func (x *PoolSlave) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSlave.ProtoReflect.Descriptor instead.
func (*PoolSlave) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{2}
}

func (x *PoolSlave) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PoolSlave) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PoolSlave) GetTcpPort() int32 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *PoolSlave) GetSslPort() int32 {
	if x != nil {
		return x.SslPort
	}
	return 0
}

func (x *PoolSlave) GetSoloPort() int32 {
	if x != nil && x.SoloPort != nil {
		return *x.SoloPort
	}
	return 0
}

func (x *PoolSlave) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

type PoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain  string       `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Host        string       `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Algos       []string     `protobuf:"bytes,3,rep,name=algos,proto3" json:"algos,omitempty"`
	PayoutMode  PayoutMode   `protobuf:"varint,4,opt,name=payout_mode,json=payoutMode,proto3,enum=pool.PayoutMode" json:"payout_mode,omitempty"`
	Solo        bool         `protobuf:"varint,5,opt,name=solo,proto3" json:"solo,omitempty"`
	Fee         *PoolFee     `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	PayoutsInfo *PayoutsInfo `protobuf:"bytes,7,opt,name=payouts_info,json=payoutsInfo,proto3" json:"payouts_info,omitempty"`
	Agents      []string     `protobuf:"bytes,8,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *PoolInfo) Reset() {
	*x = PoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfo) ProtoMessage() {}

func (x *PoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolInfo.ProtoReflect.Descriptor instead.
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{3}
}

func (x *PoolInfo) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *PoolInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PoolInfo) GetAlgos() []string {
	if x != nil {
		return x.Algos
	}
	return nil
}

func (x *PoolInfo) GetPayoutMode() PayoutMode {
	if x != nil {
		return x.PayoutMode
	}
	return PayoutMode_PPLNS
}

func (x *PoolInfo) GetSolo() bool {
	if x != nil {
		return x.Solo
	}
	return false
}

func (x *PoolInfo) GetFee() *PoolFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *PoolInfo) GetPayoutsInfo() *PayoutsInfo {
	if x != nil {
		return x.PayoutsInfo
	}
	return nil
}

func (x *PoolInfo) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

type PoolSlaves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slaves []*PoolSlave `protobuf:"bytes,1,rep,name=slaves,proto3" json:"slaves,omitempty"`
}

func (x *PoolSlaves) Reset() {
	*x = PoolSlaves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolSlaves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSlaves) ProtoMessage() {}

func (x *PoolSlaves) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSlaves.ProtoReflect.Descriptor instead.
func (*PoolSlaves) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{4}
}

func (x *PoolSlaves) GetSlaves() []*PoolSlave {
	if x != nil {
		return x.Slaves
	}
	return nil
}

type PoolStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinersCount         int32   `protobuf:"varint,1,opt,name=miners_count,json=minersCount,proto3" json:"miners_count,omitempty"`
	SoloMinersCount     int32   `protobuf:"varint,2,opt,name=solo_miners_count,json=soloMinersCount,proto3" json:"solo_miners_count,omitempty"`
	Hashrate            []byte  `protobuf:"bytes,3,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	AvgHashrate         []byte  `protobuf:"bytes,4,opt,name=avg_hashrate,json=avgHashrate,proto3" json:"avg_hashrate,omitempty"`
	SoloHashrate        []byte  `protobuf:"bytes,5,opt,name=solo_hashrate,json=soloHashrate,proto3,oneof" json:"solo_hashrate,omitempty"`
	SoloAvgHashrate     []byte  `protobuf:"bytes,6,opt,name=solo_avg_hashrate,json=soloAvgHashrate,proto3,oneof" json:"solo_avg_hashrate,omitempty"`
	ShareDifficulty     uint64  `protobuf:"varint,7,opt,name=share_difficulty,json=shareDifficulty,proto3" json:"share_difficulty,omitempty"`
	SoloShareDifficulty *uint64 `protobuf:"varint,8,opt,name=solo_share_difficulty,json=soloShareDifficulty,proto3,oneof" json:"solo_share_difficulty,omitempty"`
}

func (x *PoolStats) Reset() {
	*x = PoolStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStats) ProtoMessage() {}

func (x *PoolStats) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStats.ProtoReflect.Descriptor instead.
func (*PoolStats) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{5}
}

func (x *PoolStats) GetMinersCount() int32 {
	if x != nil {
		return x.MinersCount
	}
	return 0
}

func (x *PoolStats) GetSoloMinersCount() int32 {
	if x != nil {
		return x.SoloMinersCount
	}
	return 0
}

func (x *PoolStats) GetHashrate() []byte {
	if x != nil {
		return x.Hashrate
	}
	return nil
}

func (x *PoolStats) GetAvgHashrate() []byte {
	if x != nil {
		return x.AvgHashrate
	}
	return nil
}

func (x *PoolStats) GetSoloHashrate() []byte {
	if x != nil {
		return x.SoloHashrate
	}
	return nil
}

func (x *PoolStats) GetSoloAvgHashrate() []byte {
	if x != nil {
		return x.SoloAvgHashrate
	}
	return nil
}

func (x *PoolStats) GetShareDifficulty() uint64 {
	if x != nil {
		return x.ShareDifficulty
	}
	return 0
}

func (x *PoolStats) GetSoloShareDifficulty() uint64 {
	if x != nil && x.SoloShareDifficulty != nil {
		return *x.SoloShareDifficulty
	}
	return 0
}

var File_pool_proto protoreflect.FileDescriptor

var file_pool_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x22, 0x48, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x6f, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x22, 0xdc, 0x01, 0x0a,
	0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x73, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x67, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x67,
	0x6f, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x1f, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x52, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x22,
	0x9a, 0x03, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x6f, 0x6c,
	0x6f, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x61, 0x76, 0x67, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x6f, 0x6c, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x6c, 0x6f, 0x41, 0x76, 0x67, 0x48, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x13, 0x73, 0x6f, 0x6c, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x6f, 0x6c, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x2a, 0x21, 0x0a, 0x0a,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x50,
	0x4c, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x32,
	0xb8, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3b, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_proto_rawDescOnce sync.Once
	file_pool_proto_rawDescData = file_pool_proto_rawDesc
)

func file_pool_proto_rawDescGZIP() []byte {
	file_pool_proto_rawDescOnce.Do(func() {
		file_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_proto_rawDescData)
	})
	return file_pool_proto_rawDescData
}

var file_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pool_proto_goTypes = []interface{}{
	(PayoutMode)(0),               // 0: pool.PayoutMode
	(*PayoutsInfo)(nil),           // 1: pool.PayoutsInfo
	(*PoolFee)(nil),               // 2: pool.PoolFee
	(*PoolSlave)(nil),             // 3: pool.PoolSlave
	(*PoolInfo)(nil),              // 4: pool.PoolInfo
	(*PoolSlaves)(nil),            // 5: pool.PoolSlaves
	(*PoolStats)(nil),             // 6: pool.PoolStats
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 8: google.protobuf.Empty
}
var file_pool_proto_depIdxs = []int32{
	7, // 0: pool.PoolSlave.connected_at:type_name -> google.protobuf.Timestamp
	0, // 1: pool.PoolInfo.payout_mode:type_name -> pool.PayoutMode
	2, // 2: pool.PoolInfo.fee:type_name -> pool.PoolFee
	1, // 3: pool.PoolInfo.payouts_info:type_name -> pool.PayoutsInfo
	3, // 4: pool.PoolSlaves.slaves:type_name -> pool.PoolSlave
	8, // 5: pool.PoolService.GetPoolInfo:input_type -> google.protobuf.Empty
	8, // 6: pool.PoolService.GetPoolSlaves:input_type -> google.protobuf.Empty
	8, // 7: pool.PoolService.GetPoolStats:input_type -> google.protobuf.Empty
	4, // 8: pool.PoolService.GetPoolInfo:output_type -> pool.PoolInfo
	5, // 9: pool.PoolService.GetPoolSlaves:output_type -> pool.PoolSlaves
	6, // 10: pool.PoolService.GetPoolStats:output_type -> pool.PoolStats
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pool_proto_init() }
func file_pool_proto_init() {
	if File_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolSlave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolSlaves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pool_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_pool_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pool_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_pool_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pool_proto_goTypes,
		DependencyIndexes: file_pool_proto_depIdxs,
		EnumInfos:         file_pool_proto_enumTypes,
		MessageInfos:      file_pool_proto_msgTypes,
	}.Build()
	File_pool_proto = out.File
	file_pool_proto_rawDesc = nil
	file_pool_proto_goTypes = nil
	file_pool_proto_depIdxs = nil
}
