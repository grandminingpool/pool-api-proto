// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pool_payouts.proto

package poolPayoutsProto

import (
	context "context"
	pool_miners "github.com/grandminingpool/pool-api-proto/generated/pool_miners"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolPayoutsServiceClient is the client API for PoolPayoutsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolPayoutsServiceClient interface {
	GetMinerBalance(ctx context.Context, in *pool_miners.MinerAddressRequest, opts ...grpc.CallOption) (*MinerBalance, error)
	GetBalances(ctx context.Context, in *pool_miners.MinerAddressesRequest, opts ...grpc.CallOption) (*MinersBalances, error)
	GetMinerPayouts(ctx context.Context, in *MinerPayoutsRequest, opts ...grpc.CallOption) (*MinerPayouts, error)
	GetMinersPayouts(ctx context.Context, in *MinersPayoutsRequest, opts ...grpc.CallOption) (*MinersPayouts, error)
}

type poolPayoutsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolPayoutsServiceClient(cc grpc.ClientConnInterface) PoolPayoutsServiceClient {
	return &poolPayoutsServiceClient{cc}
}

func (c *poolPayoutsServiceClient) GetMinerBalance(ctx context.Context, in *pool_miners.MinerAddressRequest, opts ...grpc.CallOption) (*MinerBalance, error) {
	out := new(MinerBalance)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetMinerBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetBalances(ctx context.Context, in *pool_miners.MinerAddressesRequest, opts ...grpc.CallOption) (*MinersBalances, error) {
	out := new(MinersBalances)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetMinerPayouts(ctx context.Context, in *MinerPayoutsRequest, opts ...grpc.CallOption) (*MinerPayouts, error) {
	out := new(MinerPayouts)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetMinerPayouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetMinersPayouts(ctx context.Context, in *MinersPayoutsRequest, opts ...grpc.CallOption) (*MinersPayouts, error) {
	out := new(MinersPayouts)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetMinersPayouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolPayoutsServiceServer is the server API for PoolPayoutsService service.
// All implementations must embed UnimplementedPoolPayoutsServiceServer
// for forward compatibility
type PoolPayoutsServiceServer interface {
	GetMinerBalance(context.Context, *pool_miners.MinerAddressRequest) (*MinerBalance, error)
	GetBalances(context.Context, *pool_miners.MinerAddressesRequest) (*MinersBalances, error)
	GetMinerPayouts(context.Context, *MinerPayoutsRequest) (*MinerPayouts, error)
	GetMinersPayouts(context.Context, *MinersPayoutsRequest) (*MinersPayouts, error)
	mustEmbedUnimplementedPoolPayoutsServiceServer()
}

// UnimplementedPoolPayoutsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoolPayoutsServiceServer struct {
}

func (UnimplementedPoolPayoutsServiceServer) GetMinerBalance(context.Context, *pool_miners.MinerAddressRequest) (*MinerBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerBalance not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetBalances(context.Context, *pool_miners.MinerAddressesRequest) (*MinersBalances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetMinerPayouts(context.Context, *MinerPayoutsRequest) (*MinerPayouts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerPayouts not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetMinersPayouts(context.Context, *MinersPayoutsRequest) (*MinersPayouts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinersPayouts not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) mustEmbedUnimplementedPoolPayoutsServiceServer() {}

// UnsafePoolPayoutsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolPayoutsServiceServer will
// result in compilation errors.
type UnsafePoolPayoutsServiceServer interface {
	mustEmbedUnimplementedPoolPayoutsServiceServer()
}

func RegisterPoolPayoutsServiceServer(s grpc.ServiceRegistrar, srv PoolPayoutsServiceServer) {
	s.RegisterService(&PoolPayoutsService_ServiceDesc, srv)
}

func _PoolPayoutsService_GetMinerBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pool_miners.MinerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetMinerBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetMinerBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetMinerBalance(ctx, req.(*pool_miners.MinerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pool_miners.MinerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetBalances(ctx, req.(*pool_miners.MinerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetMinerPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerPayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetMinerPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetMinerPayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetMinerPayouts(ctx, req.(*MinerPayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetMinersPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinersPayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetMinersPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetMinersPayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetMinersPayouts(ctx, req.(*MinersPayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolPayoutsService_ServiceDesc is the grpc.ServiceDesc for PoolPayoutsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolPayoutsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pool_payouts.PoolPayoutsService",
	HandlerType: (*PoolPayoutsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinerBalance",
			Handler:    _PoolPayoutsService_GetMinerBalance_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _PoolPayoutsService_GetBalances_Handler,
		},
		{
			MethodName: "GetMinerPayouts",
			Handler:    _PoolPayoutsService_GetMinerPayouts_Handler,
		},
		{
			MethodName: "GetMinersPayouts",
			Handler:    _PoolPayoutsService_GetMinersPayouts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pool_payouts.proto",
}
