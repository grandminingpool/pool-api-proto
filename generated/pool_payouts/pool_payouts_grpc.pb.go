// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pool_payouts.proto

package poolPayoutsProto

import (
	context "context"
	pool_miners "github.com/grandminingpool/pool-api-proto/generated/pool_miners"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolPayoutsServiceClient is the client API for PoolPayoutsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolPayoutsServiceClient interface {
	GetMinerBalance(ctx context.Context, in *pool_miners.MinerAddressRequest, opts ...grpc.CallOption) (*MinerBalance, error)
	GetMinersBalancesFromList(ctx context.Context, in *pool_miners.MinerAddressesRequest, opts ...grpc.CallOption) (*MinersBalances, error)
	GetPayouts(ctx context.Context, in *GetPayoutsRequest, opts ...grpc.CallOption) (*PayoutsList, error)
	GetPayoutsFromList(ctx context.Context, in *GetPayoutsFromListRequest, opts ...grpc.CallOption) (*Payouts, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*MinedBlocksList, error)
	GetSoloBlocks(ctx context.Context, in *GetSoloBlocksRequest, opts ...grpc.CallOption) (*MinedSoloBlocksList, error)
	GetSoloBlocksFromList(ctx context.Context, in *GetSoloBlocksFromListRequest, opts ...grpc.CallOption) (*MinedSoloBlocks, error)
}

type poolPayoutsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolPayoutsServiceClient(cc grpc.ClientConnInterface) PoolPayoutsServiceClient {
	return &poolPayoutsServiceClient{cc}
}

func (c *poolPayoutsServiceClient) GetMinerBalance(ctx context.Context, in *pool_miners.MinerAddressRequest, opts ...grpc.CallOption) (*MinerBalance, error) {
	out := new(MinerBalance)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetMinerBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetMinersBalancesFromList(ctx context.Context, in *pool_miners.MinerAddressesRequest, opts ...grpc.CallOption) (*MinersBalances, error) {
	out := new(MinersBalances)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetMinersBalancesFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetPayouts(ctx context.Context, in *GetPayoutsRequest, opts ...grpc.CallOption) (*PayoutsList, error) {
	out := new(PayoutsList)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetPayouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetPayoutsFromList(ctx context.Context, in *GetPayoutsFromListRequest, opts ...grpc.CallOption) (*Payouts, error) {
	out := new(Payouts)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetPayoutsFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*MinedBlocksList, error) {
	out := new(MinedBlocksList)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetSoloBlocks(ctx context.Context, in *GetSoloBlocksRequest, opts ...grpc.CallOption) (*MinedSoloBlocksList, error) {
	out := new(MinedSoloBlocksList)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetSoloBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolPayoutsServiceClient) GetSoloBlocksFromList(ctx context.Context, in *GetSoloBlocksFromListRequest, opts ...grpc.CallOption) (*MinedSoloBlocks, error) {
	out := new(MinedSoloBlocks)
	err := c.cc.Invoke(ctx, "/pool_payouts.PoolPayoutsService/GetSoloBlocksFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolPayoutsServiceServer is the server API for PoolPayoutsService service.
// All implementations must embed UnimplementedPoolPayoutsServiceServer
// for forward compatibility
type PoolPayoutsServiceServer interface {
	GetMinerBalance(context.Context, *pool_miners.MinerAddressRequest) (*MinerBalance, error)
	GetMinersBalancesFromList(context.Context, *pool_miners.MinerAddressesRequest) (*MinersBalances, error)
	GetPayouts(context.Context, *GetPayoutsRequest) (*PayoutsList, error)
	GetPayoutsFromList(context.Context, *GetPayoutsFromListRequest) (*Payouts, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*MinedBlocksList, error)
	GetSoloBlocks(context.Context, *GetSoloBlocksRequest) (*MinedSoloBlocksList, error)
	GetSoloBlocksFromList(context.Context, *GetSoloBlocksFromListRequest) (*MinedSoloBlocks, error)
	mustEmbedUnimplementedPoolPayoutsServiceServer()
}

// UnimplementedPoolPayoutsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoolPayoutsServiceServer struct {
}

func (UnimplementedPoolPayoutsServiceServer) GetMinerBalance(context.Context, *pool_miners.MinerAddressRequest) (*MinerBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerBalance not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetMinersBalancesFromList(context.Context, *pool_miners.MinerAddressesRequest) (*MinersBalances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinersBalancesFromList not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetPayouts(context.Context, *GetPayoutsRequest) (*PayoutsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayouts not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetPayoutsFromList(context.Context, *GetPayoutsFromListRequest) (*Payouts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutsFromList not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetBlocks(context.Context, *GetBlocksRequest) (*MinedBlocksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetSoloBlocks(context.Context, *GetSoloBlocksRequest) (*MinedSoloBlocksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoloBlocks not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) GetSoloBlocksFromList(context.Context, *GetSoloBlocksFromListRequest) (*MinedSoloBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoloBlocksFromList not implemented")
}
func (UnimplementedPoolPayoutsServiceServer) mustEmbedUnimplementedPoolPayoutsServiceServer() {}

// UnsafePoolPayoutsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolPayoutsServiceServer will
// result in compilation errors.
type UnsafePoolPayoutsServiceServer interface {
	mustEmbedUnimplementedPoolPayoutsServiceServer()
}

func RegisterPoolPayoutsServiceServer(s grpc.ServiceRegistrar, srv PoolPayoutsServiceServer) {
	s.RegisterService(&PoolPayoutsService_ServiceDesc, srv)
}

func _PoolPayoutsService_GetMinerBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pool_miners.MinerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetMinerBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetMinerBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetMinerBalance(ctx, req.(*pool_miners.MinerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetMinersBalancesFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pool_miners.MinerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetMinersBalancesFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetMinersBalancesFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetMinersBalancesFromList(ctx, req.(*pool_miners.MinerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetPayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetPayouts(ctx, req.(*GetPayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetPayoutsFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutsFromListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetPayoutsFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetPayoutsFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetPayoutsFromList(ctx, req.(*GetPayoutsFromListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetSoloBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoloBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetSoloBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetSoloBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetSoloBlocks(ctx, req.(*GetSoloBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolPayoutsService_GetSoloBlocksFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoloBlocksFromListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolPayoutsServiceServer).GetSoloBlocksFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pool_payouts.PoolPayoutsService/GetSoloBlocksFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolPayoutsServiceServer).GetSoloBlocksFromList(ctx, req.(*GetSoloBlocksFromListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolPayoutsService_ServiceDesc is the grpc.ServiceDesc for PoolPayoutsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolPayoutsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pool_payouts.PoolPayoutsService",
	HandlerType: (*PoolPayoutsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinerBalance",
			Handler:    _PoolPayoutsService_GetMinerBalance_Handler,
		},
		{
			MethodName: "GetMinersBalancesFromList",
			Handler:    _PoolPayoutsService_GetMinersBalancesFromList_Handler,
		},
		{
			MethodName: "GetPayouts",
			Handler:    _PoolPayoutsService_GetPayouts_Handler,
		},
		{
			MethodName: "GetPayoutsFromList",
			Handler:    _PoolPayoutsService_GetPayoutsFromList_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _PoolPayoutsService_GetBlocks_Handler,
		},
		{
			MethodName: "GetSoloBlocks",
			Handler:    _PoolPayoutsService_GetSoloBlocks_Handler,
		},
		{
			MethodName: "GetSoloBlocksFromList",
			Handler:    _PoolPayoutsService_GetSoloBlocksFromList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pool_payouts.proto",
}
