// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: pool_payouts.proto

package poolPayoutsProto

import (
	pool_miners "github.com/grandminingpool/pool-api-proto/generated/pool_miners"
	filters "github.com/grandminingpool/pool-api-proto/generated/utils/filters"
	pagination "github.com/grandminingpool/pool-api-proto/generated/utils/pagination"
	sorts "github.com/grandminingpool/pool-api-proto/generated/utils/sorts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MinerBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *MinerBalance) Reset() {
	*x = MinerBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerBalance) ProtoMessage() {}

func (x *MinerBalance) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerBalance.ProtoReflect.Descriptor instead.
func (*MinerBalance) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{0}
}

func (x *MinerBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type MinersBalancesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances map[string]*MinerBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MinersBalancesMap) Reset() {
	*x = MinersBalancesMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinersBalancesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinersBalancesMap) ProtoMessage() {}

func (x *MinersBalancesMap) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinersBalancesMap.ProtoReflect.Descriptor instead.
func (*MinersBalancesMap) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{1}
}

func (x *MinersBalancesMap) GetBalances() map[string]*MinerBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type PayoutsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner  *string                      `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	TxHash *string                      `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	Amount *filters.UInt64RangeFilter   `protobuf:"bytes,3,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	PaidAt *filters.DateTimeRangeFilter `protobuf:"bytes,4,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
}

func (x *PayoutsFilters) Reset() {
	*x = PayoutsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutsFilters) ProtoMessage() {}

func (x *PayoutsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutsFilters.ProtoReflect.Descriptor instead.
func (*PayoutsFilters) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{2}
}

func (x *PayoutsFilters) GetMiner() string {
	if x != nil && x.Miner != nil {
		return *x.Miner
	}
	return ""
}

func (x *PayoutsFilters) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *PayoutsFilters) GetAmount() *filters.UInt64RangeFilter {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PayoutsFilters) GetPaidAt() *filters.DateTimeRangeFilter {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

type PayoutsSorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner  *sorts.SortOrder `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	TxHash *sorts.SortOrder `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	Amount *sorts.SortOrder `protobuf:"bytes,3,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	PaidAt *sorts.SortOrder `protobuf:"bytes,4,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
}

func (x *PayoutsSorts) Reset() {
	*x = PayoutsSorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutsSorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutsSorts) ProtoMessage() {}

func (x *PayoutsSorts) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutsSorts.ProtoReflect.Descriptor instead.
func (*PayoutsSorts) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{3}
}

func (x *PayoutsSorts) GetMiner() *sorts.SortOrder {
	if x != nil {
		return x.Miner
	}
	return nil
}

func (x *PayoutsSorts) GetTxHash() *sorts.SortOrder {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *PayoutsSorts) GetAmount() *sorts.SortOrder {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PayoutsSorts) GetPaidAt() *sorts.SortOrder {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

type GetPayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sorts      *PayoutsSorts                 `protobuf:"bytes,1,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Filters    *PayoutsFilters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Pagination *pagination.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetPayoutsRequest) Reset() {
	*x = GetPayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutsRequest) ProtoMessage() {}

func (x *GetPayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutsRequest.ProtoReflect.Descriptor instead.
func (*GetPayoutsRequest) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{4}
}

func (x *GetPayoutsRequest) GetSorts() *PayoutsSorts {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *GetPayoutsRequest) GetFilters() *PayoutsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetPayoutsRequest) GetPagination() *pagination.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetPayoutsFromListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miners  []string        `protobuf:"bytes,1,rep,name=miners,proto3" json:"miners,omitempty"`
	Filters *PayoutsFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *GetPayoutsFromListRequest) Reset() {
	*x = GetPayoutsFromListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutsFromListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutsFromListRequest) ProtoMessage() {}

func (x *GetPayoutsFromListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutsFromListRequest.ProtoReflect.Descriptor instead.
func (*GetPayoutsFromListRequest) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{5}
}

func (x *GetPayoutsFromListRequest) GetMiners() []string {
	if x != nil {
		return x.Miners
	}
	return nil
}

func (x *GetPayoutsFromListRequest) GetFilters() *PayoutsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Payout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner  string                 `protobuf:"bytes,1,opt,name=miner,proto3" json:"miner,omitempty"`
	TxHash string                 `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Amount uint64                 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PaidAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"`
}

func (x *Payout) Reset() {
	*x = Payout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payout) ProtoMessage() {}

func (x *Payout) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payout.ProtoReflect.Descriptor instead.
func (*Payout) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{6}
}

func (x *Payout) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *Payout) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Payout) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Payout) GetPaidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

type Payouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts []*Payout `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty"`
}

func (x *Payouts) Reset() {
	*x = Payouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payouts) ProtoMessage() {}

func (x *Payouts) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payouts.ProtoReflect.Descriptor instead.
func (*Payouts) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{7}
}

func (x *Payouts) GetPayouts() []*Payout {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type PayoutsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts    *Payouts                       `protobuf:"bytes,1,opt,name=payouts,proto3" json:"payouts,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PayoutsList) Reset() {
	*x = PayoutsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutsList) ProtoMessage() {}

func (x *PayoutsList) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutsList.ProtoReflect.Descriptor instead.
func (*PayoutsList) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{8}
}

func (x *PayoutsList) GetPayouts() *Payouts {
	if x != nil {
		return x.Payouts
	}
	return nil
}

func (x *PayoutsList) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PayoutsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts map[string]*Payouts `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PayoutsMap) Reset() {
	*x = PayoutsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutsMap) ProtoMessage() {}

func (x *PayoutsMap) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutsMap.ProtoReflect.Descriptor instead.
func (*PayoutsMap) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{9}
}

func (x *PayoutsMap) GetPayouts() map[string]*Payouts {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type MinedBlocksSorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner            *sorts.SortOrder `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	MinerHashrate    *sorts.SortOrder `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3,oneof" json:"miner_hashrate,omitempty"`
	BlockHeight      *sorts.SortOrder `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	BlockHash        *sorts.SortOrder `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3,oneof" json:"block_hash,omitempty"`
	RoundMinersCount *sorts.SortOrder `protobuf:"bytes,5,opt,name=round_miners_count,json=roundMinersCount,proto3,oneof" json:"round_miners_count,omitempty"`
	MinedAt          *sorts.SortOrder `protobuf:"bytes,6,opt,name=mined_at,json=minedAt,proto3,oneof" json:"mined_at,omitempty"`
}

func (x *MinedBlocksSorts) Reset() {
	*x = MinedBlocksSorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedBlocksSorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedBlocksSorts) ProtoMessage() {}

func (x *MinedBlocksSorts) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedBlocksSorts.ProtoReflect.Descriptor instead.
func (*MinedBlocksSorts) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{10}
}

func (x *MinedBlocksSorts) GetMiner() *sorts.SortOrder {
	if x != nil {
		return x.Miner
	}
	return nil
}

func (x *MinedBlocksSorts) GetMinerHashrate() *sorts.SortOrder {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedBlocksSorts) GetBlockHeight() *sorts.SortOrder {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

func (x *MinedBlocksSorts) GetBlockHash() *sorts.SortOrder {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *MinedBlocksSorts) GetRoundMinersCount() *sorts.SortOrder {
	if x != nil {
		return x.RoundMinersCount
	}
	return nil
}

func (x *MinedBlocksSorts) GetMinedAt() *sorts.SortOrder {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type MinedBlocksFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner            *string                      `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	MinerHashrate    *filters.BigIntRangeFilter   `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3,oneof" json:"miner_hashrate,omitempty"`
	BlockHeight      *filters.UInt64Filter        `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	BlockHash        *string                      `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3,oneof" json:"block_hash,omitempty"`
	RoundMinersCount *filters.UInt32Filter        `protobuf:"bytes,5,opt,name=round_miners_count,json=roundMinersCount,proto3,oneof" json:"round_miners_count,omitempty"`
	MinedAt          *filters.DateTimeRangeFilter `protobuf:"bytes,6,opt,name=mined_at,json=minedAt,proto3,oneof" json:"mined_at,omitempty"`
}

func (x *MinedBlocksFilters) Reset() {
	*x = MinedBlocksFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedBlocksFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedBlocksFilters) ProtoMessage() {}

func (x *MinedBlocksFilters) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedBlocksFilters.ProtoReflect.Descriptor instead.
func (*MinedBlocksFilters) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{11}
}

func (x *MinedBlocksFilters) GetMiner() string {
	if x != nil && x.Miner != nil {
		return *x.Miner
	}
	return ""
}

func (x *MinedBlocksFilters) GetMinerHashrate() *filters.BigIntRangeFilter {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedBlocksFilters) GetBlockHeight() *filters.UInt64Filter {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

func (x *MinedBlocksFilters) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *MinedBlocksFilters) GetRoundMinersCount() *filters.UInt32Filter {
	if x != nil {
		return x.RoundMinersCount
	}
	return nil
}

func (x *MinedBlocksFilters) GetMinedAt() *filters.DateTimeRangeFilter {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type GetBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sorts      *MinedBlocksSorts             `protobuf:"bytes,1,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Filters    *MinedBlocksFilters           `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Pagination *pagination.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{12}
}

func (x *GetBlocksRequest) GetSorts() *MinedBlocksSorts {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *GetBlocksRequest) GetFilters() *MinedBlocksFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetBlocksRequest) GetPagination() *pagination.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type MinedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner            string                 `protobuf:"bytes,1,opt,name=miner,proto3" json:"miner,omitempty"`
	MinerHashrate    []byte                 `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3" json:"miner_hashrate,omitempty"`
	BlockHeight      uint64                 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash        string                 `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	RoundMinersCount uint32                 `protobuf:"varint,5,opt,name=round_miners_count,json=roundMinersCount,proto3" json:"round_miners_count,omitempty"`
	MinedAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=mined_at,json=minedAt,proto3" json:"mined_at,omitempty"`
}

func (x *MinedBlock) Reset() {
	*x = MinedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedBlock) ProtoMessage() {}

func (x *MinedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedBlock.ProtoReflect.Descriptor instead.
func (*MinedBlock) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{13}
}

func (x *MinedBlock) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *MinedBlock) GetMinerHashrate() []byte {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedBlock) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *MinedBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *MinedBlock) GetRoundMinersCount() uint32 {
	if x != nil {
		return x.RoundMinersCount
	}
	return 0
}

func (x *MinedBlock) GetMinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type MinedBlocksList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks     []*MinedBlock                  `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *MinedBlocksList) Reset() {
	*x = MinedBlocksList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedBlocksList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedBlocksList) ProtoMessage() {}

func (x *MinedBlocksList) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedBlocksList.ProtoReflect.Descriptor instead.
func (*MinedBlocksList) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{14}
}

func (x *MinedBlocksList) GetBlocks() []*MinedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *MinedBlocksList) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type MinedSoloBlocksSorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner         *sorts.SortOrder      `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	MinerHashrate *sorts.SortOrder      `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3,oneof" json:"miner_hashrate,omitempty"`
	BlockHeight   *filters.UInt64Filter `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	BlockHash     *sorts.SortOrder      `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3,oneof" json:"block_hash,omitempty"`
	Reward        *sorts.SortOrder      `protobuf:"bytes,5,opt,name=reward,proto3,oneof" json:"reward,omitempty"`
	TxHash        *sorts.SortOrder      `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	MinedAt       *sorts.SortOrder      `protobuf:"bytes,7,opt,name=mined_at,json=minedAt,proto3,oneof" json:"mined_at,omitempty"`
}

func (x *MinedSoloBlocksSorts) Reset() {
	*x = MinedSoloBlocksSorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlocksSorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlocksSorts) ProtoMessage() {}

func (x *MinedSoloBlocksSorts) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlocksSorts.ProtoReflect.Descriptor instead.
func (*MinedSoloBlocksSorts) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{15}
}

func (x *MinedSoloBlocksSorts) GetMiner() *sorts.SortOrder {
	if x != nil {
		return x.Miner
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetMinerHashrate() *sorts.SortOrder {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetBlockHeight() *filters.UInt64Filter {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetBlockHash() *sorts.SortOrder {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetReward() *sorts.SortOrder {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetTxHash() *sorts.SortOrder {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *MinedSoloBlocksSorts) GetMinedAt() *sorts.SortOrder {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type MinedSoloBlocksFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner         *string                      `protobuf:"bytes,1,opt,name=miner,proto3,oneof" json:"miner,omitempty"`
	MinerHashrate *filters.BigIntRangeFilter   `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3,oneof" json:"miner_hashrate,omitempty"`
	BlockHeight   *filters.UInt64Filter        `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	BlockHash     *string                      `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3,oneof" json:"block_hash,omitempty"`
	Reward        *filters.UInt64RangeFilter   `protobuf:"bytes,5,opt,name=reward,proto3,oneof" json:"reward,omitempty"`
	TxHash        *string                      `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	MinedAt       *filters.DateTimeRangeFilter `protobuf:"bytes,7,opt,name=mined_at,json=minedAt,proto3,oneof" json:"mined_at,omitempty"`
}

func (x *MinedSoloBlocksFilters) Reset() {
	*x = MinedSoloBlocksFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlocksFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlocksFilters) ProtoMessage() {}

func (x *MinedSoloBlocksFilters) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlocksFilters.ProtoReflect.Descriptor instead.
func (*MinedSoloBlocksFilters) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{16}
}

func (x *MinedSoloBlocksFilters) GetMiner() string {
	if x != nil && x.Miner != nil {
		return *x.Miner
	}
	return ""
}

func (x *MinedSoloBlocksFilters) GetMinerHashrate() *filters.BigIntRangeFilter {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedSoloBlocksFilters) GetBlockHeight() *filters.UInt64Filter {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

func (x *MinedSoloBlocksFilters) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *MinedSoloBlocksFilters) GetReward() *filters.UInt64RangeFilter {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *MinedSoloBlocksFilters) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *MinedSoloBlocksFilters) GetMinedAt() *filters.DateTimeRangeFilter {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type GetSoloBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sorts      *MinedSoloBlocksSorts         `protobuf:"bytes,1,opt,name=sorts,proto3" json:"sorts,omitempty"`
	Filters    *MinedSoloBlocksFilters       `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Pagination *pagination.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetSoloBlocksRequest) Reset() {
	*x = GetSoloBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoloBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoloBlocksRequest) ProtoMessage() {}

func (x *GetSoloBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoloBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetSoloBlocksRequest) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{17}
}

func (x *GetSoloBlocksRequest) GetSorts() *MinedSoloBlocksSorts {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *GetSoloBlocksRequest) GetFilters() *MinedSoloBlocksFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetSoloBlocksRequest) GetPagination() *pagination.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetSoloBlocksFromListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miners  []string                `protobuf:"bytes,1,rep,name=miners,proto3" json:"miners,omitempty"`
	Filters *MinedSoloBlocksFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *GetSoloBlocksFromListRequest) Reset() {
	*x = GetSoloBlocksFromListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoloBlocksFromListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoloBlocksFromListRequest) ProtoMessage() {}

func (x *GetSoloBlocksFromListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoloBlocksFromListRequest.ProtoReflect.Descriptor instead.
func (*GetSoloBlocksFromListRequest) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{18}
}

func (x *GetSoloBlocksFromListRequest) GetMiners() []string {
	if x != nil {
		return x.Miners
	}
	return nil
}

func (x *GetSoloBlocksFromListRequest) GetFilters() *MinedSoloBlocksFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type MinedSoloBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miner         string                 `protobuf:"bytes,1,opt,name=miner,proto3" json:"miner,omitempty"`
	MinerHashrate []byte                 `protobuf:"bytes,2,opt,name=miner_hashrate,json=minerHashrate,proto3" json:"miner_hashrate,omitempty"`
	BlockHeight   uint64                 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash     string                 `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Reward        uint64                 `protobuf:"varint,5,opt,name=reward,proto3" json:"reward,omitempty"`
	TxHash        string                 `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	MinedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=mined_at,json=minedAt,proto3" json:"mined_at,omitempty"`
}

func (x *MinedSoloBlock) Reset() {
	*x = MinedSoloBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlock) ProtoMessage() {}

func (x *MinedSoloBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlock.ProtoReflect.Descriptor instead.
func (*MinedSoloBlock) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{19}
}

func (x *MinedSoloBlock) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *MinedSoloBlock) GetMinerHashrate() []byte {
	if x != nil {
		return x.MinerHashrate
	}
	return nil
}

func (x *MinedSoloBlock) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *MinedSoloBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *MinedSoloBlock) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *MinedSoloBlock) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MinedSoloBlock) GetMinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MinedAt
	}
	return nil
}

type MinedSoloBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*MinedSoloBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *MinedSoloBlocks) Reset() {
	*x = MinedSoloBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlocks) ProtoMessage() {}

func (x *MinedSoloBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlocks.ProtoReflect.Descriptor instead.
func (*MinedSoloBlocks) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{20}
}

func (x *MinedSoloBlocks) GetBlocks() []*MinedSoloBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type MinedSoloBlocksList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks     *MinedSoloBlocks               `protobuf:"bytes,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Pagination *pagination.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *MinedSoloBlocksList) Reset() {
	*x = MinedSoloBlocksList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlocksList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlocksList) ProtoMessage() {}

func (x *MinedSoloBlocksList) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlocksList.ProtoReflect.Descriptor instead.
func (*MinedSoloBlocksList) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{21}
}

func (x *MinedSoloBlocksList) GetBlocks() *MinedSoloBlocks {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *MinedSoloBlocksList) GetPagination() *pagination.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type MinedSoloBlocksMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks map[string]*MinedSoloBlocks `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MinedSoloBlocksMap) Reset() {
	*x = MinedSoloBlocksMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_payouts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinedSoloBlocksMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinedSoloBlocksMap) ProtoMessage() {}

func (x *MinedSoloBlocksMap) ProtoReflect() protoreflect.Message {
	mi := &file_pool_payouts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinedSoloBlocksMap.ProtoReflect.Descriptor instead.
func (*MinedSoloBlocksMap) Descriptor() ([]byte, []int) {
	return file_pool_payouts_proto_rawDescGZIP(), []int{22}
}

func (x *MinedSoloBlocksMap) GetBlocks() map[string]*MinedSoloBlocks {
	if x != nil {
		return x.Blocks
	}
	return nil
}

var File_pool_payouts_proto protoreflect.FileDescriptor

var file_pool_payouts_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xb7, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x1a, 0x57, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x53, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x70,
	0x61, 0x69, 0x64, 0x41, 0x74, 0x22, 0x39, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x22, 0x7e, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12,
	0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x1a, 0x51, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc5, 0x03, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x05, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x12,
	0x4d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x53, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x4d,
	0x69, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe8, 0x03, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x05, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x06, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xd4, 0x03, 0x0a, 0x16,
	0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x06, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e,
	0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf7, 0x01, 0x0a,
	0x0e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f,
	0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0x8c, 0x01, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4,
	0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa4, 0x04, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x48,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1e,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x22,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x6f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x6f, 0x6c, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x42, 0x53, 0x5a, 0x51,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x3b, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_payouts_proto_rawDescOnce sync.Once
	file_pool_payouts_proto_rawDescData = file_pool_payouts_proto_rawDesc
)

func file_pool_payouts_proto_rawDescGZIP() []byte {
	file_pool_payouts_proto_rawDescOnce.Do(func() {
		file_pool_payouts_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_payouts_proto_rawDescData)
	})
	return file_pool_payouts_proto_rawDescData
}

var file_pool_payouts_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_pool_payouts_proto_goTypes = []interface{}{
	(*MinerBalance)(nil),                      // 0: pool_payouts.MinerBalance
	(*MinersBalancesMap)(nil),                 // 1: pool_payouts.MinersBalancesMap
	(*PayoutsFilters)(nil),                    // 2: pool_payouts.PayoutsFilters
	(*PayoutsSorts)(nil),                      // 3: pool_payouts.PayoutsSorts
	(*GetPayoutsRequest)(nil),                 // 4: pool_payouts.GetPayoutsRequest
	(*GetPayoutsFromListRequest)(nil),         // 5: pool_payouts.GetPayoutsFromListRequest
	(*Payout)(nil),                            // 6: pool_payouts.Payout
	(*Payouts)(nil),                           // 7: pool_payouts.Payouts
	(*PayoutsList)(nil),                       // 8: pool_payouts.PayoutsList
	(*PayoutsMap)(nil),                        // 9: pool_payouts.PayoutsMap
	(*MinedBlocksSorts)(nil),                  // 10: pool_payouts.MinedBlocksSorts
	(*MinedBlocksFilters)(nil),                // 11: pool_payouts.MinedBlocksFilters
	(*GetBlocksRequest)(nil),                  // 12: pool_payouts.GetBlocksRequest
	(*MinedBlock)(nil),                        // 13: pool_payouts.MinedBlock
	(*MinedBlocksList)(nil),                   // 14: pool_payouts.MinedBlocksList
	(*MinedSoloBlocksSorts)(nil),              // 15: pool_payouts.MinedSoloBlocksSorts
	(*MinedSoloBlocksFilters)(nil),            // 16: pool_payouts.MinedSoloBlocksFilters
	(*GetSoloBlocksRequest)(nil),              // 17: pool_payouts.GetSoloBlocksRequest
	(*GetSoloBlocksFromListRequest)(nil),      // 18: pool_payouts.GetSoloBlocksFromListRequest
	(*MinedSoloBlock)(nil),                    // 19: pool_payouts.MinedSoloBlock
	(*MinedSoloBlocks)(nil),                   // 20: pool_payouts.MinedSoloBlocks
	(*MinedSoloBlocksList)(nil),               // 21: pool_payouts.MinedSoloBlocksList
	(*MinedSoloBlocksMap)(nil),                // 22: pool_payouts.MinedSoloBlocksMap
	nil,                                       // 23: pool_payouts.MinersBalancesMap.BalancesEntry
	nil,                                       // 24: pool_payouts.PayoutsMap.PayoutsEntry
	nil,                                       // 25: pool_payouts.MinedSoloBlocksMap.BlocksEntry
	(*filters.UInt64RangeFilter)(nil),         // 26: filters.UInt64RangeFilter
	(*filters.DateTimeRangeFilter)(nil),       // 27: filters.DateTimeRangeFilter
	(*sorts.SortOrder)(nil),                   // 28: sorts.SortOrder
	(*pagination.PaginationRequest)(nil),      // 29: pagination.PaginationRequest
	(*timestamppb.Timestamp)(nil),             // 30: google.protobuf.Timestamp
	(*pagination.PaginationResponse)(nil),     // 31: pagination.PaginationResponse
	(*filters.BigIntRangeFilter)(nil),         // 32: filters.BigIntRangeFilter
	(*filters.UInt64Filter)(nil),              // 33: filters.UInt64Filter
	(*filters.UInt32Filter)(nil),              // 34: filters.UInt32Filter
	(*pool_miners.MinerAddressesRequest)(nil), // 35: pool_miners.MinerAddressesRequest
}
var file_pool_payouts_proto_depIdxs = []int32{
	23, // 0: pool_payouts.MinersBalancesMap.balances:type_name -> pool_payouts.MinersBalancesMap.BalancesEntry
	26, // 1: pool_payouts.PayoutsFilters.amount:type_name -> filters.UInt64RangeFilter
	27, // 2: pool_payouts.PayoutsFilters.paid_at:type_name -> filters.DateTimeRangeFilter
	28, // 3: pool_payouts.PayoutsSorts.miner:type_name -> sorts.SortOrder
	28, // 4: pool_payouts.PayoutsSorts.tx_hash:type_name -> sorts.SortOrder
	28, // 5: pool_payouts.PayoutsSorts.amount:type_name -> sorts.SortOrder
	28, // 6: pool_payouts.PayoutsSorts.paid_at:type_name -> sorts.SortOrder
	3,  // 7: pool_payouts.GetPayoutsRequest.sorts:type_name -> pool_payouts.PayoutsSorts
	2,  // 8: pool_payouts.GetPayoutsRequest.filters:type_name -> pool_payouts.PayoutsFilters
	29, // 9: pool_payouts.GetPayoutsRequest.pagination:type_name -> pagination.PaginationRequest
	2,  // 10: pool_payouts.GetPayoutsFromListRequest.filters:type_name -> pool_payouts.PayoutsFilters
	30, // 11: pool_payouts.Payout.paid_at:type_name -> google.protobuf.Timestamp
	6,  // 12: pool_payouts.Payouts.payouts:type_name -> pool_payouts.Payout
	7,  // 13: pool_payouts.PayoutsList.payouts:type_name -> pool_payouts.Payouts
	31, // 14: pool_payouts.PayoutsList.pagination:type_name -> pagination.PaginationResponse
	24, // 15: pool_payouts.PayoutsMap.payouts:type_name -> pool_payouts.PayoutsMap.PayoutsEntry
	28, // 16: pool_payouts.MinedBlocksSorts.miner:type_name -> sorts.SortOrder
	28, // 17: pool_payouts.MinedBlocksSorts.miner_hashrate:type_name -> sorts.SortOrder
	28, // 18: pool_payouts.MinedBlocksSorts.block_height:type_name -> sorts.SortOrder
	28, // 19: pool_payouts.MinedBlocksSorts.block_hash:type_name -> sorts.SortOrder
	28, // 20: pool_payouts.MinedBlocksSorts.round_miners_count:type_name -> sorts.SortOrder
	28, // 21: pool_payouts.MinedBlocksSorts.mined_at:type_name -> sorts.SortOrder
	32, // 22: pool_payouts.MinedBlocksFilters.miner_hashrate:type_name -> filters.BigIntRangeFilter
	33, // 23: pool_payouts.MinedBlocksFilters.block_height:type_name -> filters.UInt64Filter
	34, // 24: pool_payouts.MinedBlocksFilters.round_miners_count:type_name -> filters.UInt32Filter
	27, // 25: pool_payouts.MinedBlocksFilters.mined_at:type_name -> filters.DateTimeRangeFilter
	10, // 26: pool_payouts.GetBlocksRequest.sorts:type_name -> pool_payouts.MinedBlocksSorts
	11, // 27: pool_payouts.GetBlocksRequest.filters:type_name -> pool_payouts.MinedBlocksFilters
	29, // 28: pool_payouts.GetBlocksRequest.pagination:type_name -> pagination.PaginationRequest
	30, // 29: pool_payouts.MinedBlock.mined_at:type_name -> google.protobuf.Timestamp
	13, // 30: pool_payouts.MinedBlocksList.blocks:type_name -> pool_payouts.MinedBlock
	31, // 31: pool_payouts.MinedBlocksList.pagination:type_name -> pagination.PaginationResponse
	28, // 32: pool_payouts.MinedSoloBlocksSorts.miner:type_name -> sorts.SortOrder
	28, // 33: pool_payouts.MinedSoloBlocksSorts.miner_hashrate:type_name -> sorts.SortOrder
	33, // 34: pool_payouts.MinedSoloBlocksSorts.block_height:type_name -> filters.UInt64Filter
	28, // 35: pool_payouts.MinedSoloBlocksSorts.block_hash:type_name -> sorts.SortOrder
	28, // 36: pool_payouts.MinedSoloBlocksSorts.reward:type_name -> sorts.SortOrder
	28, // 37: pool_payouts.MinedSoloBlocksSorts.tx_hash:type_name -> sorts.SortOrder
	28, // 38: pool_payouts.MinedSoloBlocksSorts.mined_at:type_name -> sorts.SortOrder
	32, // 39: pool_payouts.MinedSoloBlocksFilters.miner_hashrate:type_name -> filters.BigIntRangeFilter
	33, // 40: pool_payouts.MinedSoloBlocksFilters.block_height:type_name -> filters.UInt64Filter
	26, // 41: pool_payouts.MinedSoloBlocksFilters.reward:type_name -> filters.UInt64RangeFilter
	27, // 42: pool_payouts.MinedSoloBlocksFilters.mined_at:type_name -> filters.DateTimeRangeFilter
	15, // 43: pool_payouts.GetSoloBlocksRequest.sorts:type_name -> pool_payouts.MinedSoloBlocksSorts
	16, // 44: pool_payouts.GetSoloBlocksRequest.filters:type_name -> pool_payouts.MinedSoloBlocksFilters
	29, // 45: pool_payouts.GetSoloBlocksRequest.pagination:type_name -> pagination.PaginationRequest
	16, // 46: pool_payouts.GetSoloBlocksFromListRequest.filters:type_name -> pool_payouts.MinedSoloBlocksFilters
	30, // 47: pool_payouts.MinedSoloBlock.mined_at:type_name -> google.protobuf.Timestamp
	19, // 48: pool_payouts.MinedSoloBlocks.blocks:type_name -> pool_payouts.MinedSoloBlock
	20, // 49: pool_payouts.MinedSoloBlocksList.blocks:type_name -> pool_payouts.MinedSoloBlocks
	31, // 50: pool_payouts.MinedSoloBlocksList.pagination:type_name -> pagination.PaginationResponse
	25, // 51: pool_payouts.MinedSoloBlocksMap.blocks:type_name -> pool_payouts.MinedSoloBlocksMap.BlocksEntry
	0,  // 52: pool_payouts.MinersBalancesMap.BalancesEntry.value:type_name -> pool_payouts.MinerBalance
	7,  // 53: pool_payouts.PayoutsMap.PayoutsEntry.value:type_name -> pool_payouts.Payouts
	20, // 54: pool_payouts.MinedSoloBlocksMap.BlocksEntry.value:type_name -> pool_payouts.MinedSoloBlocks
	35, // 55: pool_payouts.PoolPayoutsService.GetMinersBalancesFromList:input_type -> pool_miners.MinerAddressesRequest
	4,  // 56: pool_payouts.PoolPayoutsService.GetPayouts:input_type -> pool_payouts.GetPayoutsRequest
	5,  // 57: pool_payouts.PoolPayoutsService.GetPayoutsFromList:input_type -> pool_payouts.GetPayoutsFromListRequest
	12, // 58: pool_payouts.PoolPayoutsService.GetBlocks:input_type -> pool_payouts.GetBlocksRequest
	17, // 59: pool_payouts.PoolPayoutsService.GetSoloBlocks:input_type -> pool_payouts.GetSoloBlocksRequest
	18, // 60: pool_payouts.PoolPayoutsService.GetSoloBlocksFromList:input_type -> pool_payouts.GetSoloBlocksFromListRequest
	1,  // 61: pool_payouts.PoolPayoutsService.GetMinersBalancesFromList:output_type -> pool_payouts.MinersBalancesMap
	8,  // 62: pool_payouts.PoolPayoutsService.GetPayouts:output_type -> pool_payouts.PayoutsList
	9,  // 63: pool_payouts.PoolPayoutsService.GetPayoutsFromList:output_type -> pool_payouts.PayoutsMap
	14, // 64: pool_payouts.PoolPayoutsService.GetBlocks:output_type -> pool_payouts.MinedBlocksList
	21, // 65: pool_payouts.PoolPayoutsService.GetSoloBlocks:output_type -> pool_payouts.MinedSoloBlocksList
	22, // 66: pool_payouts.PoolPayoutsService.GetSoloBlocksFromList:output_type -> pool_payouts.MinedSoloBlocksMap
	61, // [61:67] is the sub-list for method output_type
	55, // [55:61] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_pool_payouts_proto_init() }
func file_pool_payouts_proto_init() {
	if File_pool_payouts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pool_payouts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinersBalancesMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutsSorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayoutsFromListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedBlocksSorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedBlocksFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedBlocksList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlocksSorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlocksFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoloBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoloBlocksFromListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlocksList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_payouts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinedSoloBlocksMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pool_payouts_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_pool_payouts_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pool_payouts_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_pool_payouts_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_pool_payouts_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_pool_payouts_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_payouts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pool_payouts_proto_goTypes,
		DependencyIndexes: file_pool_payouts_proto_depIdxs,
		MessageInfos:      file_pool_payouts_proto_msgTypes,
	}.Build()
	File_pool_payouts_proto = out.File
	file_pool_payouts_proto_rawDesc = nil
	file_pool_payouts_proto_goTypes = nil
	file_pool_payouts_proto_depIdxs = nil
}
