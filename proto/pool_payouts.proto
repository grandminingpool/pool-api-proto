syntax = "proto3";

package pool_payouts;

option go_package = "github.com/grandminingpool/pool-api-proto/generated/pool_payouts;poolPayoutsProto";

import "google/protobuf/timestamp.proto";
import "pool_miners.proto";

message MinerBalance {
    uint64 balance = 1;
}

message MinersBalances {
    map<string, MinerBalance> balances = 1;
}

message MinersPayoutsFilters {
    google.protobuf.Timestamp paid_from = 1;
}

message MinerPayoutsRequest {
    string address = 1;
    MinersPayoutsFilters filters = 2;
}

message MinersPayoutsRequest {
    repeated string addresses = 1;
    MinersPayoutsFilters filters = 2;
}

message MinerPayout {
    string tx_hash = 1;
    uint64 amount = 2;
    google.protobuf.Timestamp paid_at = 3;
}

message MinerSoloPayout {
    bytes miner_hashrate = 1;
    string tx_hash = 2;
    uint64 reward = 3;
    string block_hash = 4;
    uint64 block_reward  = 5;
    uint64 share_difficulty  = 6;
    google.protobuf.Timestamp paid_at = 7;
}

message MinerPayouts {
    repeated MinerPayout payouts = 1;
}

message MinersPayouts {
    map<string, MinerPayouts> payouts = 1;
}

message MinerSoloPayouts {
    repeated MinerSoloPayout payouts = 1;
}

message MinersSoloPayouts {
    map<string, MinerSoloPayouts> payouts = 1;
}

service PoolPayoutsService {
    rpc GetMinerBalance(pool_miners.MinerAddressRequest) returns (MinerBalance);
    rpc GetBalances(pool_miners.MinerAddressesRequest) returns (MinersBalances);
    rpc GetMinerPayouts(MinerPayoutsRequest) returns (MinerPayouts);
    rpc GetPayouts(MinersPayoutsRequest) returns (MinersPayouts);
    rpc GetMinerSoloPayouts(MinerPayoutsRequest) returns (MinerSoloPayouts);
    rpc GetSoloPayouts(MinersPayoutsRequest) returns (MinersSoloPayouts);
}