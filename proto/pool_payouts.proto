syntax = "proto3";

package pool_payouts;

option go_package = "github.com/grandminingpool/pool-api-proto/generated/pool_payouts;poolPayoutsProto";

import "google/protobuf/timestamp.proto";
import "pool_miners.proto";
import "utils/pagination.proto";
import "utils/sorts.proto";
import "utils/filters.proto";

message MinerBalance {
    uint64 balance = 1;
}

message MinersBalancesMap {
    map<string, MinerBalance> balances = 1;
}

message PayoutsFilters {
    optional string miner = 1;
    optional string tx_hash = 2;
    optional filters.UInt64RangeFilter amount = 3;
    optional filters.DateTimeRangeFilter paid_at = 4;
}

message PayoutsSorts {
    optional sorts.SortOrder miner = 1;
    optional sorts.SortOrder tx_hash = 2;
    optional sorts.SortOrder amount = 3;
    optional sorts.SortOrder paid_at = 4;
}

message GetPayoutsRequest {
    PayoutsSorts sorts = 1;
    PayoutsFilters filters = 2;
    pagination.PaginationRequest pagination = 3;
}

message GetPayoutsFromListRequest {
    repeated string miners = 1;
    PayoutsFilters filters = 2;
}

message Payout {
    string miner = 1;
    string tx_hash = 2;
    uint64 amount = 3;
    google.protobuf.Timestamp paid_at = 4;
}

message Payouts {
    repeated Payout payouts = 1;
}

message PayoutsList {
    Payouts payouts = 1;
    pagination.PaginationResponse pagination = 2;
}

message PayoutsMap {
    map<string, Payouts> payouts = 1;
}

message MinedBlocksSorts {
    optional sorts.SortOrder miner = 1;
    optional sorts.SortOrder miner_hashrate = 2;
    optional sorts.SortOrder block_hash = 3;
    optional sorts.SortOrder share_difficulty = 4;
    optional sorts.SortOrder round_miners_count = 5;
    optional sorts.SortOrder mined_at = 6;
}

message MinedBlocksFilters {
    optional string miner = 1;
    optional filters.BigIntRangeFilter miner_hashrate = 2;
    optional string block_hash = 3;
    optional filters.UInt64RangeFilter share_difficulty = 4;
    optional filters.UInt32Filter round_miners_count = 5;
    optional filters.DateTimeRangeFilter mined_at = 6;
}

message GetBlocksRequest {
    MinedBlocksSorts sorts = 1;
    MinedBlocksFilters filters = 2;
    pagination.PaginationRequest pagination = 3;
}

message MinedBlock {
    string miner = 1;
    bytes miner_hashrate = 2;
    string block_hash = 3;
    uint64 share_difficulty = 4;
    uint32 round_miners_count = 5;
    google.protobuf.Timestamp mined_at = 6;
}

message MinedBlocksList {
    repeated MinedBlock blocks = 1;
    pagination.PaginationResponse pagination = 2;
}

message MinedSoloBlocksSorts {
    optional sorts.SortOrder miner = 1;
    optional sorts.SortOrder miner_hashrate = 2;
    optional sorts.SortOrder block_hash = 3;
    optional sorts.SortOrder reward = 4;
    optional sorts.SortOrder tx_hash = 5;
    optional sorts.SortOrder share_difficulty = 6;
    optional sorts.SortOrder mined_at = 7;
}

message MinedSoloBlocksFilters {
    optional string miner = 1;
    optional filters.BigIntRangeFilter miner_hashrate = 2;
    optional string block_hash = 3;
    optional filters.UInt64RangeFilter reward = 4;
    optional string tx_hash = 5;
    optional filters.UInt64RangeFilter share_difficulty = 6;
    optional filters.DateTimeRangeFilter mined_at = 7;
}

message GetSoloBlocksRequest {
    MinedSoloBlocksSorts sorts = 1;
    MinedSoloBlocksFilters filters = 2;
    pagination.PaginationRequest pagination = 3;
}

message GetSoloBlocksFromListRequest {
    repeated string miners = 1;
    MinedSoloBlocksFilters filters = 2;
}

message MinedSoloBlock {
    string miner = 1;
    bytes miner_hashrate = 2;
    string block_hash = 3;
    uint64 reward = 4;
    string tx_hash = 5;
    uint64 share_difficulty = 6;
    google.protobuf.Timestamp mined_at = 7;
}

message MinedSoloBlocks {
    repeated MinedSoloBlock blocks = 1;
}

message MinedSoloBlocksList {
    MinedSoloBlocks blocks = 1;
    pagination.PaginationResponse pagination = 2;
}

message MinedSoloBlocksMap {
    map<string, MinedSoloBlocks> blocks = 1;
}

service PoolPayoutsService {
    rpc GetMinersBalancesFromList(pool_miners.MinerAddressesRequest) returns (MinersBalancesMap);
    
    rpc GetPayouts(GetPayoutsRequest) returns (PayoutsList);
    rpc GetPayoutsFromList(GetPayoutsFromListRequest) returns (PayoutsMap);
    
    rpc GetBlocks(GetBlocksRequest) returns (MinedBlocksList);
    rpc GetSoloBlocks(GetSoloBlocksRequest) returns (MinedSoloBlocksList);
    rpc GetSoloBlocksFromList(GetSoloBlocksFromListRequest) returns (MinedSoloBlocksMap);
}